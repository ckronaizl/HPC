#all advanced calculations come from the following sources:
# https://www.nbastuffer.com/analytics101/offensive-efficiency/

import csv
import os

#stops generated by defense
def stops_forced_calc(team, opponent):
    #steals + blk * FMwt * (1 - 1.07 * DOR%) + DRB * (1 - FMwt)
    fmwt = fmwt_calc(team, opponent)
    dfg = opponent[11]
    dor = float(opponent[19]) / float(opponent[19]) + float(opponent[20])
    return team[22] + team[23] * fmwt * (1 - 1.07 * dor) + team[19] * (1 - fmwt)

#stops caused by lack of offense
def stops_off_calc(team, opponent):
    fmwt = fmwt_calc(team, opponent)
    dor = float(opponent[19]) / float(opponent[19]) + float(opponent[20])
    tm1 = (opponent[11] - opponent[9] - opponent[23]) * fmwt * team[7] * (1 - 1.07 * dor) / team[7]
    tm2 = (opponent[24] - team[22])
    tm3 = 0.4 * opponent[16] * ((1 - (team[17])) ** 2)

    return tm1 + tm2 + tm3

def stops_pct_calc(team, opponent):
    stops = stops_forced_calc(team, opponent) + stops_off_calc(team, opponent)

def der_calc(team, opponent):

    #opp_pts / (opp_fgm + (1 - (1 - (opp_ftm / opp_fta))^2 * opp_fta * 0.4)
    if float(opponent[16]) != 0:
        pts_per_scposs = float(opponent[8]) / float((float(opponent[9]) + (1- (1 - (float(opponent[15]) / float(opponent[16]))) ** 2) * float(opponent[16])*0.4))
    if float(team[27]) != 0:
        return 100 * float((float(opponent[8]) / float(team[27])))
    else:
        return 0


def build_win_loss():
    for stats_file in os.listdir("C:/local/nba_stats/"):
        if stats_file.find("adv") > -1 and stats_file.find("loss") == -1 and stats_file.find("win") == -1:
            loss_list = []
            win_list = []
            win_file = stats_file[:len(stats_file)-4]
            loss_file = win_file
            win_file += "_win.csv"
            loss_file += "_loss.csv"
            with open("C:/local/nba_stats/" + stats_file, 'r') as seasonstats:
                rawstats = seasonstats.readlines()

                stats = []
                games = 0
                for line in rawstats:
                    line = line[:len(line) - 1]
                    stats.append(line.split(','))

                for y in range(0, len(stats)-1):
                    if stats[y][6] == 0.0 or stats[y][6] == "0.0":
                        loss_list.append(stats[y])
                    else:
                        win_list.append(stats[y])

                win_list.insert(0,["TEAM", "PTS", "FGM", "FGA", "FG%", "3PM", "3PA", "3P%", "FTM", "FTA", "FT%", "OREB", "DREB", "REB", "AST", "STL", "BLK", "TOV", "PF", "+/-", "POSS", "TS%", "OER", "DER"])
                loss_list.insert(0,["TEAM", "PTS", "FGM", "FGA", "FG%", "3PM", "3PA", "3P%", "FTM", "FTA", "FT%", "OREB", "DREB", "REB", "AST", "STL", "BLK", "TOV", "PF", "+/-", "POSS", "TS%", "OER", "DER"])

                with open("C:/local/nba_stats/" + win_file, 'w') as win_csv:
                    csv_write = csv.writer(win_csv)
                    csv_write.writerows(win_list)

                with open("C:/local/nba_stats/" + loss_file, 'w') as loss_csv:
                    csv_write = csv.writer(loss_csv)
                    csv_write.writerows(loss_list)

            print(win_file)

            stats = []
            games = 0
            for line in rawstats:
                line = line[:len(line) - 1]
                stats.append(line.split(','))

        else:
            continue



#forced miss weight
def fmwt_calc(team, opponent):
    dfg = opponent[11]
    dor = float(opponent[19]) / float(opponent[19]) + float(opponent[20])

    fmwt_num = dfg * (1 - dor)
    fmwt_den = dfg * (1 - dor) + (1 - dfg) * dor

    return fmwt_num / fmwt_den

def ts_calc(team):
    #tmPTS = team[8]
    #tmFGA = team[10]
    #tmFTA = team[16]
    if team[16] == "0" or team[16] == "-" or team[16] == 0:
        return 0
    else:
        return float(100*int(team[8])/(2*(int(team[10]) + (0.44*int(team[16])))))

def oer_calc(team):
    #tmPOSS = team[27]
    #tmPTS = team[8]
    if len(team) > 27:
        if float(team[27]) > 0:
            return float(100*int(team[8])/float(team[27]))
    return 0

def possessions_calc(team, opponent):
    possessions = 0
    #tmFGA = team[10]
    #tmFTA = team[16]
    #tmFTM = team[15]
    #tmORB = team[18]
    #opDRB = opponent[19]
    #tmFG = team[9]
    #tmTO = team[24]

    #tm_ORB_PCT = team[18]/(team[18] + opponent[19])
    #tm_SCORE_POSS = team[9] + (1-(1-(team[15]/team[16]))**2) * team[16] * 0.44
    #tm_PLAY_PCT = tm_SCORE_POSS / (team[10] + team[16] * 0.4 + team[24])
    #tm_ORB_WGT = ((1 - tm_ORB_PCT) * tm_PLAY_PCT) / ((1-tm_ORB_PCT) * tm_PLAY_PCT + tm_ORB_PCT * (1-tm_PLAY_PCT))
    #ORB_PART = team[18] * tm_ORB_WGT * tm_PLAY_PCT

    try:
        possessions = (int(team[10])+0.4*int(team[16])-1.07*(int(team[18])/(int(team[18])+int(opponent[19])))*(int(team[10])-int(team[9]))+int(team[24]))
        possessions = 0.5*(possessions+(int(opponent[10])+0.4*int(opponent[16])-1.07*(int(opponent[18])/(int(opponent[18])+int(team[19])))*(int(opponent[10])-int(opponent[9]))+int(opponent[24])))
    except:
        return 0
    return float(possessions)

build_win_loss()

#begin main
team_avg = []

#these are backwards -> teststring = training data
teststring = "C:/local/nba_stats/NBA_train_83-15.csv"
trainstring = "C:/local/nba_stats/NBA_test_15-20.csv"

for stats_file in os.listdir("C:/local/nba_stats/"):

    if stats_file.find("teams") > -1 and stats_file.find("adv") == -1 and stats_file.find("avg") == -1:
        with open("C:/local/nba_stats/" + stats_file,'r') as seasonstats:
            rawstats = seasonstats.readlines()

        stats = []
        games = 0
        for line in rawstats:
            line = line[:len(line)-1]
            stats.append(line.split(','))

        team_avg.clear()

        for x in range(1,len(stats)):
            #stats[x][26] = stats[x][26][:len(stats[x][26])-1]

            if stats[x][6] == "W":
                stats[x][6] = 1
            else:
                stats[x][6] = 0

            for reval in range(6,len(stats[x])-1):
                if stats[x][reval] == "-":
                    stats[x][reval] = 0
                else:
                    stats[x][reval] = float(stats[x][reval])

            if len(stats[x]) < 28:

                for y in range(x,len(stats)):

                    #find team matchup
                    if stats[x][1] == stats[y][5] and stats[x][2] == stats[y][2] and len(stats[x]) < 30:

                        stats[x].append(possessions_calc(stats[x], stats[y]))
                        stats[x].append(ts_calc(stats[x]))
                        stats[x].append(oer_calc(stats[x]))
                        stats[x].append(der_calc(stats[x], stats[y]))

                        if len(stats[y]) < 28:
                            stats[y].append(possessions_calc(stats[y], stats[x]))
                            stats[y].append(ts_calc(stats[y]))
                            stats[y].append(oer_calc(stats[y]))
                            stats[y].append(der_calc(stats[y], stats[x]))

            # check to see if team has already been added to averages
            team_num = -1

            for z in range(0, len(team_avg)):
                if team_avg[z].count(stats[x][3]) != 0:
                    team_num = z
                    break
            if team_num == -1:
                team_avg.append([])
                team_avg[len(team_avg) - 1].append(stats[x][3])
                for z in range(8, len(stats[x])):
                    if stats[x][z] == "-":
                        team_avg[len(team_avg) - 1].append(0)
                    else:
                        team_avg[len(team_avg) - 1].append(float(stats[x][z]))
                team_avg[len(team_avg) - 1].append(1)

            else:
                for z in range(8, len(stats[x])):
                    if stats[x][z] == "-":
                        team_avg[team_num][z - 7] = 0
                    else:
                        try:
                            team_avg[team_num][z - 7] = float(team_avg[team_num][z - 7]) + float(stats[x][z])
                        except:
                            print("fook me laddy")
                team_avg[team_num][len(team_avg[team_num]) - 1] += 1
                games += 1

            if len(stats[x]) < 27:
                continue
        print(games)
        tempstring = stats_file[:len(stats_file)-4] + "_adv.csv"
        stats[0].append("POSS")
        stats[0].append("TS%")
        stats[0].append("OER")
        stats[0].append("DER")
        with open("C:/local/nba_stats/" + tempstring,'w',newline='') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerows(stats)


        #calculate averages
        for x in range(0,len(team_avg)-1):
            for y in range(1,len(team_avg[x])-1):
                team_avg[x][y] = float(team_avg[x][y]) / float(team_avg[x][len(team_avg[x])-1])
            tempstring = stats_file[:len(stats_file) - 4] + "_avg.csv"
        team_avg.insert(0,["TEAM","PTS","FGM","FGA","FG%","3PM","3PA","3P%","FTM","FTA","FT%","OREB","DREB","REB","AST","STL","BLK","TOV","PF","+/-","POSS","TS%","OER","DER","GP"])

        with open("C:/local/nba_stats/" + tempstring, 'w', newline='') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerows(team_avg)

        test_stats = []
        for x in range(0,len(stats)-1):
            test_stats.append(stats[x][6:])

        #build test & train datasets
        filenum = stats_file.find("201")
        #temp = stats_file[filenum + 3]
        if filenum == -1:

            with open(teststring, 'a', newline='') as testcsv:
                csvwriter = csv.writer(testcsv)
                csvwriter.writerows(test_stats[1:])

        else:
            #temp = stats_file[filenum + 3]
            with open(trainstring, 'a', newline='') as traincsv:
                csvwriter = csv.writer(traincsv)
                csvwriter.writerows(test_stats[1:])


    else:
        continue